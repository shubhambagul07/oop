import java.io.*;
import java.util.*;

class Student {
    int studentId;
    String name;
    String rollNo;
    String studentClass;
    double marks;
    String address;

    // Constructor
    public Student(int studentId, String name, String rollNo, String studentClass, double marks, String address) {
        this.studentId = studentId;
        this.name = name;
        this.rollNo = rollNo;
        this.studentClass = studentClass;
        this.marks = marks;
        this.address = address;
    }

    // Method to display student details
    public String display() {
        return "Student ID: " + studentId + ", Name: " + name + ", Roll No: " + rollNo + ", Class: " + studentClass + ", Marks: " + marks + ", Address: " + address;
    }

    // Convert student to a string for file storage
    public String toFileString() {
        return studentId + "," + name + "," + rollNo + "," + studentClass + "," + marks + "," + address;
    }

    // Static method to create a Student object from a file line
    public static Student fromFileString(String line) {
        String[] parts = line.split(",");
        return new Student(Integer.parseInt(parts[0]), parts[1], parts[2], parts[3], Double.parseDouble(parts[4]), parts[5]);
    }
}

public class StudentDatabase {

    static final String DATABASE_FILE = "student_database.txt";

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nStudent Database Management System:");
            System.out.println("1. Create Database (Add Record)");
            System.out.println("2. Display Database");
            System.out.println("3. Delete Record");
            System.out.println("4. Update Record");
            System.out.println("5. Search Record");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            switch (choice) {
                case 1:
                    addRecord(scanner);
                    break;
                case 2:
                    displayDatabase();
                    break;
                case 3:
                    deleteRecord(scanner);
                    break;
                case 4:
                    updateRecord(scanner);
                    break;
                case 5:
                    searchRecord(scanner);
                    break;
                case 6:
                    System.out.println("Exiting...");
                    scanner.close();
                    return;
                default:
                    System.out.println("Invalid choice, please try again.");
            }
        }
    }

    // Method to add a student record to the database
    public static void addRecord(Scanner scanner) {
        System.out.println("\nEnter Student Details:");

        System.out.print("Student ID: ");
        int studentId = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        System.out.print("Name: ");
        String name = scanner.nextLine();

        System.out.print("Roll No: ");
        String rollNo = scanner.nextLine();

        System.out.print("Class: ");
        String studentClass = scanner.nextLine();

        System.out.print("Marks: ");
        double marks = scanner.nextDouble();
        scanner.nextLine();  // Consume newline

        System.out.print("Address: ");
        String address = scanner.nextLine();

        Student student = new Student(studentId, name, rollNo, studentClass, marks, address);
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(DATABASE_FILE, true))) {
            writer.write(student.toFileString());
            writer.newLine();
            System.out.println("Record added successfully.");
        } catch (IOException e) {
            System.out.println("Error adding record: " + e.getMessage());
        }
    }

    // Method to display all student records in the database
    public static void displayDatabase() {
        try (BufferedReader reader = new BufferedReader(new FileReader(DATABASE_FILE))) {
            String line;
            System.out.println("\nStudent Database:");
            while ((line = reader.readLine()) != null) {
                Student student = Student.fromFileString(line);
                System.out.println(student.display());
            }
        } catch (IOException e) {
            System.out.println("Error displaying database: " + e.getMessage());
        }
    }

    // Method to delete a student record from the database
    public static void deleteRecord(Scanner scanner) {
        System.out.print("\nEnter Student ID to delete: ");
        int studentId = scanner.nextInt();

        File tempFile = new File("temp_database.txt");
        boolean deleted = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(DATABASE_FILE));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                Student student = Student.fromFileString(line);
                if (student.studentId != studentId) {
                    writer.write(student.toFileString());
                    writer.newLine();
                } else {
                    deleted = true;
                }
            }

            if (deleted) {
                tempFile.renameTo(new File(DATABASE_FILE));
                System.out.println("Record deleted successfully.");
            } else {
                System.out.println("Student ID not found.");
            }

        } catch (IOException e) {
            System.out.println("Error deleting record: " + e.getMessage());
        }
    }

    // Method to update a student record in the database
    public static void updateRecord(Scanner scanner) {
        System.out.print("\nEnter Student ID to update: ");
        int studentId = scanner.nextInt();
        scanner.nextLine();  // Consume newline

        File tempFile = new File("temp_database.txt");
        boolean updated = false;

        try (BufferedReader reader = new BufferedReader(new FileReader(DATABASE_FILE));
             BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

            String line;
            while ((line = reader.readLine()) != null) {
                Student student = Student.fromFileString(line);
                if (student.studentId == studentId) {
                    System.out.println("Enter new details for Student ID " + studentId);

                    System.out.print("Name: ");
                    String name = scanner.nextLine();

                    System.out.print("Roll No: ");
                    String rollNo = scanner.nextLine();

                    System.out.print("Class: ");
                    String studentClass = scanner.nextLine();

                    System.out.print("Marks: ");
                    double marks = scanner.nextDouble();
                    scanner.nextLine();  // Consume newline

                    System.out.print("Address: ");
                    String address = scanner.nextLine();

                    student = new Student(studentId, name, rollNo, studentClass, marks, address);
                    updated = true;
                }

                writer.write(student.toFileString());
                writer.newLine();
            }

            if (updated) {
                tempFile.renameTo(new File(DATABASE_FILE));
                System.out.println("Record updated successfully.");
            } else {
                System.out.println("Student ID not found.");
            }

        } catch (IOException e) {
            System.out.println("Error updating record: " + e.getMessage());
        }
    }

    // Method to search for a student record by ID
    public static void searchRecord(Scanner scanner) {
        System.out.print("\nEnter Student ID to search: ");
        int studentId = scanner.nextInt();

        try (BufferedReader reader = new BufferedReader(new FileReader(DATABASE_FILE))) {
            String line;
            boolean found = false;

            while ((line = reader.readLine()) != null) {
                Student student = Student.fromFileString(line);
                if (student.studentId == studentId) {
                    System.out.println("\nStudent Found: " + student.display());
                    found = true;
                    break;
                }
            }

            if (!found) {
                System.out.println("Student ID not found.");
            }

        } catch (IOException e) {
            System.out.println("Error searching record: " + e.getMessage());
        }
    }
}
